
exports.name = Mustache.name;
exports.version = Mustache.version;

exports.to_html = function() {
  return Mustache.to_html.apply(this, arguments);
};

var compile = exports.compile = function (source, options) {
    if (typeof source === 'string') {
        return function (options) {
            var partials = {},
                extension = options.extension || '.mustache',
                regex = new RegExp('{{>([^\/#\^]+?)\1?}}+', 'g');
                
            if (options.body) {
                partials['yield'] = options.body;
                layout = source = fs.readFileSync(options.filename, 'utf8');
            } else {
                layout = source;
            }
            
            var result, partial;
            
            for (var i = 0; i < Object.keys(partials).length; i++) {
                while ((result = regex.exec(source)) !== null) {
                    partial = result[1].replace(/\s+/g, '');
                    
                    if (partial === 'yield') {
                        partials[partial] = fs.readFileSync(
                            path.join(options.settings.views,
                            partial + extension), 'utf8');
                    }
                }
                
                var keys = Object.keys(partials);
                
                source = partials[keys[i]];
            }

            return exports.to_html(layout, options, partials);
        };
    } else {
        return source;   
    }
};

exports.render = function (template, options) {
    template = exports.compile(template, options);
    
    return template(options);
};